<?xml version="1.0" encoding="utf-8"?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      throwExceptions="false"
      internalLogLevel="Off" >
  <!-- optional, add some variables
  https://github.com/nlog/NLog/wiki/Configuration-file#variables
  -->
  <!--<extensions>
    <add assembly="NLog.Web.AspNetCore" />
  </extensions>-->
  <!--
  See https://github.com/nlog/nlog/wiki/Configuration-file
  for information on customizing logging rules and outputs.
   -->
  <targets>
    <!--
    add your targets here
    See https://github.com/nlog/NLog/wiki/Targets for possible targets.
    See https://github.com/nlog/NLog/wiki/Layout-Renderers for the possible layout renderers.
    -->
    <!-- json output for log level: Fatal and Error-->
    <target xsi:type="File" async="true" name="jsonFileError" keepFileOpen="true"  OpenFileCacheTimeout="60"
            archiveAboveSize="5242880" maxArchiveFiles="20" archiveNumbering="DateAndSequence" archiveFileName="${basedir}/logs/error/archive/error.{#}.log"
                   AutoFlush="false" openFileFlushTimeout="5"  ConcurrentWrites="false" fileName="${basedir}/logs/error/${shortdate}.log">
      <layout xsi:type="JsonLayout" includeAllProperties="true">
        <attribute name="time" layout="${longdate}" />
        <attribute name="level" layout="${level:upperCase=true}"/>
        <attribute name="requestId" layout="${event-properties:item=requestid}" />
        <attribute name="threadId" layout="${threadid}"/>
        <attribute name="callsite" layout="${callsite:includSourcePath=true}"/>
        <attribute name="message" layout="${message}" escapeUnicode="false"  escapeForwardSlash="false"/>
        <attribute name="exception" layout="${exception:format=ToString}" escapeUnicode="false" escapeForwardSlash="false"/>
        <attribute name="stackTrace" layout="${StackTrace:topFrames=10}" />
      </layout>
    </target>

    <!-- json output for log level: Trace and Debug-->
    <target xsi:type="File" async="true" name="jsonFileTrace" keepFileOpen="true" OpenFileCacheTimeout="60"
            archiveAboveSize="5242880" maxArchiveFiles="20" archiveNumbering="DateAndSequence" archiveFileName="${basedir}/logs/trace/archive/trace.{#}.log"
                    AutoFlush="false" openFileFlushTimeout="5"  ConcurrentWrites="false" fileName="${basedir}/logs/trace/${shortdate}.log">
      <layout xsi:type="JsonLayout" includeAllProperties="true">
        <attribute name="time" layout="${longdate}" />
        <attribute name="level" layout="${level:upperCase=true}"/>
        <attribute name="requestId" layout="${event-properties:item=requestid}" />
        <attribute name="threadId" layout="${threadid}"/>
        <attribute name="callsite" layout="${callsite:includSourcePath=true}"/>
        <attribute name="message" layout="${message}" escapeUnicode="false" escapeForwardSlash="false"/>
        <attribute name="exception" layout="${exception:format=ToString}" escapeUnicode="false" escapeForwardSlash="false"/>
      </layout>
    </target>
    <!--txt输出配置-->

    <target name="log_fileerror" xsi:type="File" keepFileOpen="true" OpenFileCacheTimeout="60" AutoFlush="false" openFileFlushTimeout="5" ConcurrentWrites="false"
          
            fileName="${basedir}/logs/error/${shortdate}.log" layout="${longdate} | ${uppercase:${level}}| threadId:${threadid} | ${callsite:includSourcePath=true} | ${message} | ${exception:format=ToString} | ${StackTrace:topFrames=10}" />



    <!--控制台输出-->
    <target name="colorConsole" xsi:type="ColoredConsole"  layout="${time} ${uppercase:${level}} |${threadid} ${callsite:includSourcePath=true} -> ${event-properties:item=requestid} -- ${message}">
      <highlight-row condition="level == LogLevel.Trace" foregroundColor="Gray" />
      <highlight-row condition="level == LogLevel.Debug" foregroundColor="White" />
      <highlight-row condition="level == LogLevel.Info" foregroundColor="green" />
      <highlight-row condition="level == LogLevel.Warn" foregroundColor="yellow" />
      <highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
      <highlight-row condition="level == LogLevel.Fatal" foregroundColor="magenta" />
    </target>
    <!--
    Write events to a file with the date in the filename.
    <target xsi:type="File" name="f" fileName="${basedir}/logs/${shortdate}.log"
            layout="${longdate} ${uppercase:${level}} ${message}" />
    -->
  </targets>
  <rules>
    <!-- add your logging rules here-->

    <!--
    Write all events with minimal level of Debug (So Debug, Info, Warn, Error and Fatal, but not Trace)  to "f"
    <logger name="*" minlevel="Debug" writeTo="f" /> -->

    <logger name="*" minlevel="Debug"  writeTo="colorConsole"/>
    <logger name="*" minlevel="Trace" maxlevel="Fatal"  writeTo="jsonFileTrace"/>
    <logger name="*" minlevel="Error" maxlevel="Fatal" final="true" writeTo="jsonFileError"/>

  </rules>
</nlog>
